/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Variants } from "./components/tabs/kclsu-tabs/tabtypes";
export namespace Components {
    interface AddVarsityScores {
        "year": string;
    }
    interface CampaignAim {
    }
    interface CampaignNews {
        /**
          * The MSL organisation ID where the news is kept - filled in automatically by campaign-tabs parent
         */
        "newsid": string;
    }
    interface CampaignTabs {
        /**
          * The URL of the facebook page or group
         */
        "facebook": string;
        /**
          * The MSL organisation ID where the news is kept
         */
        "newsid": string;
        /**
          * The URL of the document for the Strategy Doc uploaded under Resources for that campaign organisation.
         */
        "strategydoc": string;
    }
    interface CandidateDisplay {
        "data": any;
        /**
          * Lazy option in profile cards
         */
        "nolazy": boolean;
    }
    interface CandidateUpload {
        /**
          * MSL ELections ID
         */
        "electionid": string;
        /**
          * The JSON generated from the browser-side uploaded excel spreadsheet
         */
        "spreadsheetdata": any;
        /**
          * Either 'candidates' or 'results'. Will set the firebase url and key map
         */
        "stage": string;
    }
    interface CloudinaryApp {
        /**
          * The Cloudinary image id - provided using the browser-side upload script, or using the the node server function
         */
        "public_id": string;
    }
    interface CreateVarsityData {
        "allowcreate": boolean;
        "allowupdate": boolean;
        "msltag": string;
        "test": boolean;
        "year": string;
    }
    interface DesktopHide {
        /**
          * In addition to hiding all children content in screens desktop + bigger, this will hide content in screens tablet + bigger
         */
        "hidetablet": boolean;
    }
    interface ElectionsCandidates {
        /**
          * The election ID from MSL!
         */
        "electionid": string;
        /**
          * Filter out RON profiles in the candidate listing
         */
        "removeron": boolean;
        /**
          * Set to true to display results data. False to display All Candidates
         */
        "results": boolean;
    }
    interface ElectionsFooter {
    }
    interface ElectionsTab {
        "active": boolean;
        "combineresults": boolean;
        "posts": string;
        "tabtitle": string;
        "type": 'single' | 'multiple' | 'groupings';
    }
    interface EventsListing {
        /**
          * Choose the card component for each event
         */
        "cardtype": 'label' | 'text' | 'profile';
        /**
          * Show event cards in a column
         */
        "col": boolean;
        /**
          * The Call To Action text in the link on profile cards
         */
        "cta": string;
        /**
          * The MSL event tag to filter events
         */
        "eventtag": string;
        /**
          * The max number of events to display
         */
        "limit": string;
    }
    interface FlexContainer {
        /**
          * The same as the 'justify-content' flex property along the x axis
         */
        "alignx": string;
        /**
          * The same as the 'align-items' flex property along the y axis
         */
        "aligny": string;
        /**
          * Set the flex direction: column, reverse-column, row, reverse-row
         */
        "direction": string;
        /**
          * Ensure the container stretches the full width and height of parent container
         */
        "fillcontainer": boolean;
        /**
          * In mobile display in column direction - NOT YET RELEASED
         */
        "mobcolumn": boolean;
        /**
          * If the parent container element needs to be an <ul> list element
         */
        "renderlist": boolean;
        /**
          * Add flex-wrap to flex items
         */
        "wrap": boolean;
    }
    interface FullBio {
        "data": any;
    }
    interface FullwidthBeigeStrip {
    }
    interface FullwidthStrip {
        "color": string;
        "height": string;
    }
    interface GalleryThumbnail {
        "active": boolean;
        "cardheight": string;
        "emitid": string;
        "image": string;
        "videotitle": string;
    }
    interface GalleryThumbnailStacked {
        "active": boolean;
        "cardheight": string;
        "emitid": string;
        "image": string;
        "videotitle": string;
    }
    interface GetInvolved {
        /**
          * The typeform URL
         */
        "typeform": string;
    }
    interface GridLanding {
    }
    interface GridLandingItem {
        "height": string;
        "label": string;
        "width": string;
    }
    interface GroupTab {
        /**
          * Set this Group Tab as the active tab
         */
        "active": boolean;
        /**
          * The exact post names as appeared in MSL, separated by a pipe character |
         */
        "exclude": string;
        "regex": string;
        "replace": string;
        "searchterms": string;
        /**
          * The title for the tab for this group
         */
        "tabtitle": string;
    }
    interface GroupedCandidateDisplay {
        "data": any;
    }
    interface ImageFitContainer {
        "alt": string;
        "classes": string;
        "src": string;
    }
    interface ImageSliderAuto {
        "classes": string;
        /**
          * A string of images
         */
        "images": string[];
        "interval": number;
    }
    interface ImageText {
        /**
          * This turns the component into a card, rather than just an image/text layout
         */
        "card": boolean;
        /**
          * The primary image focus area. standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea": string;
        /**
          * The title at the top of the text
         */
        "heading": string;
        /**
          * Applies to mobilescreen displays only. Will hide the image and display content only
         */
        "hideimage": boolean;
        /**
          * The image link (get from Cloudinary)
         */
        "image": string;
        /**
          * Provide a set % width for the image. Takes a  number without the % sign
         */
        "imagewidth": string;
        /**
          * Animate the image (scale in) on scroll
         */
        "imagezoom": boolean;
        /**
          * Set the margin for the card
         */
        "margin": string;
        /**
          * When the image and content stack, reverse the order so the image is on top
         */
        "reversestack": boolean;
        /**
          * Applies to MOBILE / TABLET <780px screens only. Paragraph and heading sizes reduced
         */
        "smalltext": boolean;
        /**
          * Switch the side the image is on.
         */
        "switch": boolean;
        /**
          * The paragraph text
         */
        "text": string;
        /**
          * Choose the colour for the paragraph text
         */
        "textcolour": string;
    }
    interface InnerTabContent {
        "active": boolean;
        "name": string;
    }
    interface InnerTabHeader {
        "active": boolean;
        "index": number;
        "name": string;
    }
    interface InnerTabsContainer {
        "innertab": boolean;
    }
    interface KclsuButton {
        "addFocus": () => Promise<void>;
        /**
          * Centers the button in the page
         */
        "center": boolean;
        /**
          * Provide a custom click function handler. Use emitid rather if a parent component is listening for event.
         */
        "clickfn": () => void;
        /**
          * Makes the link download
         */
        "download": boolean;
        /**
          * Event Listener name
         */
        "emitid": string;
        /**
          * Give the button a fixed width
         */
        "fixedwidth": string;
        /**
          * Adds icon to the page
         */
        "icon": string;
        /**
          * The URL to link to
         */
        "link": string;
        /**
          * specifiy a margin, otherwise uses default
         */
        "margin": string;
        /**
          * Opens the link in a new tab
         */
        "newtab": boolean;
        /**
          * Make the button a secondary purple button
         */
        "purple": boolean;
        /**
          * Give the button rounded corners
         */
        "rounded": boolean;
        /**
          * Make the button small
         */
        "small": boolean;
        /**
          * The text for the button
         */
        "text": string;
        /**
          * Makes the button very small
         */
        "verysmall": boolean;
    }
    interface KclsuCountdown {
        /**
          * The date to countdown to. Must match date string format
         */
        "date": string;
        /**
          * Optional: set a fixed font-size for tablet, desktop and wider.
         */
        "fontsize": any;
        /**
          * The margin of the countdown clock
         */
        "margin": string;
        /**
          * Give the message text a white block background
         */
        "msgbg": boolean;
        /**
          * The text beneath the countdown
         */
        "text": string;
        /**
          * Optional: set a colour for the text beneath the countdown.
         */
        "textcolour": any;
        /**
          * The width of the countdown clock - in Pixels ONLY
         */
        "width": string;
    }
    interface KclsuModal {
        /**
          * This will allow a user to click away and hide the modal when open
         */
        "autoexit": boolean;
        /**
          * Supply a custom function to be invoked when modal is opened
         */
        "enterfn": () => void;
        /**
          * Supply a custom function to be invoked when modal is closed
         */
        "exitfn": () => void;
        /**
          * Set position to absolute or other. Defaults to fixed
         */
        "position": string;
        /**
          * Controls when the modal is open and visible or not
         */
        "show": boolean;
    }
    interface KclsuSearch {
        /**
          * If searching an custom web component, provide the name of the atrribute to query
         */
        "attr": string;
        /**
          * The container of the search result / search field, used to hide the element from results. Can be a tag, class or id
         */
        "containerselector": string;
        /**
          * Remove the error message if there are no search results
         */
        "noerror": boolean;
        /**
          * The text inside the search input, which disappears once a user starts typing
         */
        "placeholdertext": string;
        /**
          * If searching the text of an HTML element, provide the element's selector - tag, class or id
         */
        "selector": string;
    }
    interface KclsuTabs {
        "focusFirstTab": () => Promise<void>;
        "variant": Variants;
    }
    interface KclsuTabsContainer {
    }
    interface LabelCard {
        /**
          * If a button included, the link for the button
         */
        "buttonlink": string;
        /**
          * If a button included, the text for the button
         */
        "buttontitle": string;
        /**
          * Specify a fixed cardheight
         */
        "cardheight": string;
        /**
          * The main title of the card
         */
        "cardtitle": string;
        /**
          * Specify a fixed card with
         */
        "cardwidth": string;
        /**
          * The main title of the card
         */
        "highlightText": boolean;
        /**
          * The image URL for the card. Defaults to the kclsu logo
         */
        "image": string;
        /**
          * The link for the card - NOT for the button
         */
        "link": string;
        /**
          * Give the card a custom margin
         */
        "margin": string;
        /**
          * If image to be displayed on right hand side
         */
        "reverse": boolean;
        /**
          * Make the card the smallest height possible
         */
        "smallestheight": boolean;
        /**
          * This will reduce the size of the heading in the card
         */
        "smallheading": boolean;
        /**
          * The sub text beneath the title
         */
        "text": string;
    }
    interface LastYearScores {
    }
    interface LazyImage {
        /**
          * The alt tag of the image
         */
        "alt": string;
        /**
          * Image will scale into view
         */
        "animatein": boolean;
        /**
          * If the image is being used only as thumbnail, such as project-cards and image-text components
         */
        "contentimage": boolean;
        /**
          * Provide a custom cloudinary transformation. Must be in format: string,string,string eg: c_fill,f_auto,fl_any_format
         */
        "customtransform": string;
        /**
          * If setting width for mobile and desktop, use width property for mobile and this property for desktop
         */
        "desktopwidth": string;
        /**
          * Use standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea": string;
        "image": string;
        /**
          * If set to false, it will keep any existing cloudinary transforms
         */
        "keeptransforms": boolean;
        /**
          * Remove lazy-loading functionality. Retains Object Fit positioing
         */
        "nolazy": boolean;
        /**
          * If you want to render an img element in a responsive container without object positioning
         */
        "plainimg": boolean;
        /**
          * If the image is being used only as thumbnail, such as in event cards, label cards and profile cards
         */
        "thumbnail": boolean;
        /**
          * A width for the image in pixels
         */
        "width": string;
    }
    interface LoadingSpinner {
        /**
          * Set margin of spinner
         */
        "margin": string;
        /**
          * Display the spinner
         */
        "show": boolean;
    }
    interface MobileHide {
        /**
          * In addition to hiding all children in screens mobile + smaller, this will hide content in screens tablet + smaller
         */
        "hidetablet": boolean;
    }
    interface ModalBackdrop {
        "showbg": boolean;
    }
    interface MyComponent {
    }
    interface NewsCard {
        "newslink": string;
        "newstitle": string;
    }
    interface PageBanner {
        /**
          * Supply a background image for the banner
         */
        "bgimage": string;
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme": string;
        /**
          * The <h2> heading for the section
         */
        "heading": string;
        /**
          * Supply an image for the banner
         */
        "image": string;
        /**
          * Supply a custom height for the banner image
         */
        "imageheight": string;
        /**
          * Supply an custom width for the banner image
         */
        "imagewidth": string;
        /**
          * If a landing page
         */
        "landing": boolean;
        /**
          * The <h1> heading for a page. There should only be one pagetitle for page. Use the heading attribute for other titles.
         */
        "pagetitle": string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours": string;
        /**
          * The paragraph text. If you need text links or separate paragraphs, rather insert HTML.
         */
        "text": string;
        /**
          * Supply a video URL
         */
        "video": string;
    }
    interface PageContent {
    }
    interface PageFooter {
        "bgcolor": string;
        "colone": string;
        "colthree": string;
        "coltwo": string;
        "logo": string;
        "textcolor": string;
    }
    interface PresetCard {
        "dimensions": string;
        "presetid": string;
        "presetname": string;
    }
    interface PresetControls {
    }
    interface PrimaryButton {
        "to": string;
    }
    interface ProfileCard {
        "addFocus": () => Promise<void>;
        /**
          * The text for the primary text link bottom left
         */
        "cta": string;
        /**
          * The ID string for click events, using Stencil's Emitter. Only applies to card's bottom right link- DEVELOPER USE
         */
        "emitid": string;
        /**
          * The image URL
         */
        "image": string;
        /**
          * The URL link for the primary text link on the bottom left of the card
         */
        "link": string;
        /**
          * The title for the card - usually a full name
         */
        "name": string;
        /**
          * Applies to lazy loading of images. Remove lazy loading
         */
        "nolazy": boolean;
        /**
          * A sub heading - usually a position or field title
         */
        "position": string;
        /**
          * A call back function to be supplied for the first (left hand side) call to action, as well as the clickable name
         */
        "primaryfn": () => void;
        /**
          * A call back function to be supplied for the second (right hand side) call to action
         */
        "secondaryfn": () => void;
        /**
          * The text for the secondary text link bottom right
         */
        "secondcta": string;
        /**
          * A second URL link for the bottom right of the card
         */
        "secondlink": string;
    }
    interface ProfileCardLayout {
    }
    interface ProfileCardModal {
        /**
          * The text for the primary text link bottom left
         */
        "cta": string;
        /**
          * The image URL
         */
        "image": string;
        /**
          * The URL link for the primary text link on the bottom left of the card
         */
        "link": string;
        /**
          * The title for the card - usually a full name
         */
        "name": string;
        /**
          * A sub heading - usually a position or field title
         */
        "position": string;
        /**
          * The text for the secondary text link bottom right
         */
        "secondcta": string;
        /**
          * A second URL link for the bottom right of the card
         */
        "secondlink": string;
    }
    interface ProfileLogoCard {
        /**
          * The text title of the card
         */
        "cardtitle": string;
        /**
          * The background image URL
         */
        "image": string;
        /**
          * Specify which part of the image you want to focus - top, bottom, right, left, center
         */
        "imagefocus": string;
        /**
          * The URL link for the the card
         */
        "link": string;
        /**
          * The logo image URL - at least 150x150px, must be a square image.
         */
        "logo": string;
        /**
          * OPTIONAL - if you are using a transparent text icon and need to set a background colour
         */
        "logocolour": string;
    }
    interface ProfileTabs {
        /**
          * Specify Tab ID you want to keep open by default
         */
        "activeid": string;
        /**
          * The URL of the database to fetch profiles from (firebase)
         */
        "database": string;
        /**
          * Array with child arrays containing Tab Heading, Tab ID, and Text(optional)
         */
        "headings": any;
    }
    interface ProjectCard {
        /**
          * Position the content of the card along the X axis
         */
        "alignx": string;
        /**
          * Position the content of the card along the Y axis
         */
        "aligny": string;
        /**
          * If displaying events, set a custom URL for 'all events' in place of dynamically created URL
         */
        "alleventsurl": string;
        /**
          * Display an event listing
         */
        "eventtag": string;
        /**
          * The primary image focus area. standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea": string;
        "heading": string;
        /**
          * Applies to mobile displays only. Will hide the image and display content only
         */
        "hideimage": boolean;
        "image": string;
        "text": string;
        "transparent": boolean;
    }
    interface ProjectCardEvents {
        /**
          * Optional. Supply a URL which the All Events button will link to if there are events. Otherwise this is dynamically set.
         */
        "alleventsurl": string;
        /**
          * The main heading
         */
        "heading": string;
        /**
          * The MSL Event tag
         */
        "tag": string;
    }
    interface ProjectHeading {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme": string;
        /**
          * The <h2> heading for the section
         */
        "heading": string;
        /**
          * The <h1> heading for a page. There should only be one pagetitle for page. Use the heading attribute for other titles.
         */
        "pagetitle": string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours": string;
        /**
          * The paragraph text. If you need text links or separate paragraphs, rather insert HTML.
         */
        "text": string;
    }
    interface ProjectImage {
        /**
          * The alt tage for the image
         */
        "alt": string;
        /**
          * Choose an area of the image to focus: top, left, right, bottom
         */
        "focusarea": string;
        /**
          * The image URL link
         */
        "link": string;
    }
    interface ProjectPage {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme": string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours": string;
    }
    interface ProjectSocials {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme": string;
        /**
          * The hashtag used in social media. Do not include the hash symbol
         */
        "hashtag": string;
        /**
          * For developers only. The name of the slot for this component to be inserted
         */
        "slotr": string;
    }
    interface QuickLink {
        "to": string;
    }
    interface QuickLinks {
        "name": string;
    }
    interface ScrollObserver {
        /**
          * Select the animation name for the child component on intersection. Choose from list of supplied animations
         */
        "animation": string;
        /**
          * If true, the component will render a child lazy-image
         */
        "lazyimage": boolean;
    }
    interface ShowSupport {
    }
    interface SupportOption {
        "heading": string;
        "supportname": string;
    }
    interface SupportProgress {
        "current": any;
        "maxtotal": any;
        "supportname": string;
    }
    interface TabArea {
        "active": boolean;
        "findFocus": () => Promise<void>;
        "name": string;
    }
    interface TabContent {
        "active": boolean;
        "name": string;
    }
    interface TabHeader {
        "active": boolean;
        "index": string;
        "name": string;
    }
    interface TabTitle {
        /**
          * Is the tab title active, and corresponding tab area visible
         */
        "active": boolean;
        "addFocus": () => Promise<void>;
        /**
          * A unique name, matching the name of the tab area component
         */
        "name": string;
        "variant": Variants;
    }
    interface TabsContainer {
        "innertab": boolean;
    }
    interface TextCard {
        /**
          * The purple heading in the card
         */
        "cardtitle": string;
        /**
          * The Url link you want to link to
         */
        "link": string;
        /**
          * Any extra text. If you want it to be empty, add empty string value:  ""
         */
        "subtext": string;
    }
    interface UserLogin {
        /**
          * Provide a custom callback.
         */
        "callbackFn": (token: string) => void;
        /**
          * The name of the database area. For example: projectx
         */
        "database": string;
        "unsignedauth": boolean;
    }
    interface VarsityLanding {
        "currentDate": { weekday: string; day: any; month: string; year: any; hours: any; minutes: any; };
        "year": string;
    }
    interface VarsityNextMatches {
        "data": any;
    }
    interface VarsityRace {
        "data": any;
        "target": number;
    }
    interface VarsityTotalScore {
        "scores": any;
    }
    interface VarsityUpcoming {
        "data": any;
        "showall": boolean;
    }
    interface VarsityWeather {
    }
    interface VideoEmbed {
        /**
          * The id of the Youtube Video - found in the URL eg youtube.com/watch?v={VIDEO_ID}
         */
        "embedid": any;
        /**
          * The URL of the Youtube video you want to display - CURRENTLY NOT WORKING
         */
        "url": string;
    }
    interface VideoGallery {
        /**
          * The Youtube URL for any given playlist
         */
        "playlist": any;
    }
    interface VideoGalleryStacked {
        /**
          * The Youtube URL for any given playlist
         */
        "playlist": any;
    }
}
declare global {
    interface HTMLAddVarsityScoresElement extends Components.AddVarsityScores, HTMLStencilElement {
    }
    var HTMLAddVarsityScoresElement: {
        prototype: HTMLAddVarsityScoresElement;
        new (): HTMLAddVarsityScoresElement;
    };
    interface HTMLCampaignAimElement extends Components.CampaignAim, HTMLStencilElement {
    }
    var HTMLCampaignAimElement: {
        prototype: HTMLCampaignAimElement;
        new (): HTMLCampaignAimElement;
    };
    interface HTMLCampaignNewsElement extends Components.CampaignNews, HTMLStencilElement {
    }
    var HTMLCampaignNewsElement: {
        prototype: HTMLCampaignNewsElement;
        new (): HTMLCampaignNewsElement;
    };
    interface HTMLCampaignTabsElement extends Components.CampaignTabs, HTMLStencilElement {
    }
    var HTMLCampaignTabsElement: {
        prototype: HTMLCampaignTabsElement;
        new (): HTMLCampaignTabsElement;
    };
    interface HTMLCandidateDisplayElement extends Components.CandidateDisplay, HTMLStencilElement {
    }
    var HTMLCandidateDisplayElement: {
        prototype: HTMLCandidateDisplayElement;
        new (): HTMLCandidateDisplayElement;
    };
    interface HTMLCandidateUploadElement extends Components.CandidateUpload, HTMLStencilElement {
    }
    var HTMLCandidateUploadElement: {
        prototype: HTMLCandidateUploadElement;
        new (): HTMLCandidateUploadElement;
    };
    interface HTMLCloudinaryAppElement extends Components.CloudinaryApp, HTMLStencilElement {
    }
    var HTMLCloudinaryAppElement: {
        prototype: HTMLCloudinaryAppElement;
        new (): HTMLCloudinaryAppElement;
    };
    interface HTMLCreateVarsityDataElement extends Components.CreateVarsityData, HTMLStencilElement {
    }
    var HTMLCreateVarsityDataElement: {
        prototype: HTMLCreateVarsityDataElement;
        new (): HTMLCreateVarsityDataElement;
    };
    interface HTMLDesktopHideElement extends Components.DesktopHide, HTMLStencilElement {
    }
    var HTMLDesktopHideElement: {
        prototype: HTMLDesktopHideElement;
        new (): HTMLDesktopHideElement;
    };
    interface HTMLElectionsCandidatesElement extends Components.ElectionsCandidates, HTMLStencilElement {
    }
    var HTMLElectionsCandidatesElement: {
        prototype: HTMLElectionsCandidatesElement;
        new (): HTMLElectionsCandidatesElement;
    };
    interface HTMLElectionsFooterElement extends Components.ElectionsFooter, HTMLStencilElement {
    }
    var HTMLElectionsFooterElement: {
        prototype: HTMLElectionsFooterElement;
        new (): HTMLElectionsFooterElement;
    };
    interface HTMLElectionsTabElement extends Components.ElectionsTab, HTMLStencilElement {
    }
    var HTMLElectionsTabElement: {
        prototype: HTMLElectionsTabElement;
        new (): HTMLElectionsTabElement;
    };
    interface HTMLEventsListingElement extends Components.EventsListing, HTMLStencilElement {
    }
    var HTMLEventsListingElement: {
        prototype: HTMLEventsListingElement;
        new (): HTMLEventsListingElement;
    };
    interface HTMLFlexContainerElement extends Components.FlexContainer, HTMLStencilElement {
    }
    var HTMLFlexContainerElement: {
        prototype: HTMLFlexContainerElement;
        new (): HTMLFlexContainerElement;
    };
    interface HTMLFullBioElement extends Components.FullBio, HTMLStencilElement {
    }
    var HTMLFullBioElement: {
        prototype: HTMLFullBioElement;
        new (): HTMLFullBioElement;
    };
    interface HTMLFullwidthBeigeStripElement extends Components.FullwidthBeigeStrip, HTMLStencilElement {
    }
    var HTMLFullwidthBeigeStripElement: {
        prototype: HTMLFullwidthBeigeStripElement;
        new (): HTMLFullwidthBeigeStripElement;
    };
    interface HTMLFullwidthStripElement extends Components.FullwidthStrip, HTMLStencilElement {
    }
    var HTMLFullwidthStripElement: {
        prototype: HTMLFullwidthStripElement;
        new (): HTMLFullwidthStripElement;
    };
    interface HTMLGalleryThumbnailElement extends Components.GalleryThumbnail, HTMLStencilElement {
    }
    var HTMLGalleryThumbnailElement: {
        prototype: HTMLGalleryThumbnailElement;
        new (): HTMLGalleryThumbnailElement;
    };
    interface HTMLGalleryThumbnailStackedElement extends Components.GalleryThumbnailStacked, HTMLStencilElement {
    }
    var HTMLGalleryThumbnailStackedElement: {
        prototype: HTMLGalleryThumbnailStackedElement;
        new (): HTMLGalleryThumbnailStackedElement;
    };
    interface HTMLGetInvolvedElement extends Components.GetInvolved, HTMLStencilElement {
    }
    var HTMLGetInvolvedElement: {
        prototype: HTMLGetInvolvedElement;
        new (): HTMLGetInvolvedElement;
    };
    interface HTMLGridLandingElement extends Components.GridLanding, HTMLStencilElement {
    }
    var HTMLGridLandingElement: {
        prototype: HTMLGridLandingElement;
        new (): HTMLGridLandingElement;
    };
    interface HTMLGridLandingItemElement extends Components.GridLandingItem, HTMLStencilElement {
    }
    var HTMLGridLandingItemElement: {
        prototype: HTMLGridLandingItemElement;
        new (): HTMLGridLandingItemElement;
    };
    interface HTMLGroupTabElement extends Components.GroupTab, HTMLStencilElement {
    }
    var HTMLGroupTabElement: {
        prototype: HTMLGroupTabElement;
        new (): HTMLGroupTabElement;
    };
    interface HTMLGroupedCandidateDisplayElement extends Components.GroupedCandidateDisplay, HTMLStencilElement {
    }
    var HTMLGroupedCandidateDisplayElement: {
        prototype: HTMLGroupedCandidateDisplayElement;
        new (): HTMLGroupedCandidateDisplayElement;
    };
    interface HTMLImageFitContainerElement extends Components.ImageFitContainer, HTMLStencilElement {
    }
    var HTMLImageFitContainerElement: {
        prototype: HTMLImageFitContainerElement;
        new (): HTMLImageFitContainerElement;
    };
    interface HTMLImageSliderAutoElement extends Components.ImageSliderAuto, HTMLStencilElement {
    }
    var HTMLImageSliderAutoElement: {
        prototype: HTMLImageSliderAutoElement;
        new (): HTMLImageSliderAutoElement;
    };
    interface HTMLImageTextElement extends Components.ImageText, HTMLStencilElement {
    }
    var HTMLImageTextElement: {
        prototype: HTMLImageTextElement;
        new (): HTMLImageTextElement;
    };
    interface HTMLInnerTabContentElement extends Components.InnerTabContent, HTMLStencilElement {
    }
    var HTMLInnerTabContentElement: {
        prototype: HTMLInnerTabContentElement;
        new (): HTMLInnerTabContentElement;
    };
    interface HTMLInnerTabHeaderElement extends Components.InnerTabHeader, HTMLStencilElement {
    }
    var HTMLInnerTabHeaderElement: {
        prototype: HTMLInnerTabHeaderElement;
        new (): HTMLInnerTabHeaderElement;
    };
    interface HTMLInnerTabsContainerElement extends Components.InnerTabsContainer, HTMLStencilElement {
    }
    var HTMLInnerTabsContainerElement: {
        prototype: HTMLInnerTabsContainerElement;
        new (): HTMLInnerTabsContainerElement;
    };
    interface HTMLKclsuButtonElement extends Components.KclsuButton, HTMLStencilElement {
    }
    var HTMLKclsuButtonElement: {
        prototype: HTMLKclsuButtonElement;
        new (): HTMLKclsuButtonElement;
    };
    interface HTMLKclsuCountdownElement extends Components.KclsuCountdown, HTMLStencilElement {
    }
    var HTMLKclsuCountdownElement: {
        prototype: HTMLKclsuCountdownElement;
        new (): HTMLKclsuCountdownElement;
    };
    interface HTMLKclsuModalElement extends Components.KclsuModal, HTMLStencilElement {
    }
    var HTMLKclsuModalElement: {
        prototype: HTMLKclsuModalElement;
        new (): HTMLKclsuModalElement;
    };
    interface HTMLKclsuSearchElement extends Components.KclsuSearch, HTMLStencilElement {
    }
    var HTMLKclsuSearchElement: {
        prototype: HTMLKclsuSearchElement;
        new (): HTMLKclsuSearchElement;
    };
    interface HTMLKclsuTabsElement extends Components.KclsuTabs, HTMLStencilElement {
    }
    var HTMLKclsuTabsElement: {
        prototype: HTMLKclsuTabsElement;
        new (): HTMLKclsuTabsElement;
    };
    interface HTMLKclsuTabsContainerElement extends Components.KclsuTabsContainer, HTMLStencilElement {
    }
    var HTMLKclsuTabsContainerElement: {
        prototype: HTMLKclsuTabsContainerElement;
        new (): HTMLKclsuTabsContainerElement;
    };
    interface HTMLLabelCardElement extends Components.LabelCard, HTMLStencilElement {
    }
    var HTMLLabelCardElement: {
        prototype: HTMLLabelCardElement;
        new (): HTMLLabelCardElement;
    };
    interface HTMLLastYearScoresElement extends Components.LastYearScores, HTMLStencilElement {
    }
    var HTMLLastYearScoresElement: {
        prototype: HTMLLastYearScoresElement;
        new (): HTMLLastYearScoresElement;
    };
    interface HTMLLazyImageElement extends Components.LazyImage, HTMLStencilElement {
    }
    var HTMLLazyImageElement: {
        prototype: HTMLLazyImageElement;
        new (): HTMLLazyImageElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLMobileHideElement extends Components.MobileHide, HTMLStencilElement {
    }
    var HTMLMobileHideElement: {
        prototype: HTMLMobileHideElement;
        new (): HTMLMobileHideElement;
    };
    interface HTMLModalBackdropElement extends Components.ModalBackdrop, HTMLStencilElement {
    }
    var HTMLModalBackdropElement: {
        prototype: HTMLModalBackdropElement;
        new (): HTMLModalBackdropElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLNewsCardElement extends Components.NewsCard, HTMLStencilElement {
    }
    var HTMLNewsCardElement: {
        prototype: HTMLNewsCardElement;
        new (): HTMLNewsCardElement;
    };
    interface HTMLPageBannerElement extends Components.PageBanner, HTMLStencilElement {
    }
    var HTMLPageBannerElement: {
        prototype: HTMLPageBannerElement;
        new (): HTMLPageBannerElement;
    };
    interface HTMLPageContentElement extends Components.PageContent, HTMLStencilElement {
    }
    var HTMLPageContentElement: {
        prototype: HTMLPageContentElement;
        new (): HTMLPageContentElement;
    };
    interface HTMLPageFooterElement extends Components.PageFooter, HTMLStencilElement {
    }
    var HTMLPageFooterElement: {
        prototype: HTMLPageFooterElement;
        new (): HTMLPageFooterElement;
    };
    interface HTMLPresetCardElement extends Components.PresetCard, HTMLStencilElement {
    }
    var HTMLPresetCardElement: {
        prototype: HTMLPresetCardElement;
        new (): HTMLPresetCardElement;
    };
    interface HTMLPresetControlsElement extends Components.PresetControls, HTMLStencilElement {
    }
    var HTMLPresetControlsElement: {
        prototype: HTMLPresetControlsElement;
        new (): HTMLPresetControlsElement;
    };
    interface HTMLPrimaryButtonElement extends Components.PrimaryButton, HTMLStencilElement {
    }
    var HTMLPrimaryButtonElement: {
        prototype: HTMLPrimaryButtonElement;
        new (): HTMLPrimaryButtonElement;
    };
    interface HTMLProfileCardElement extends Components.ProfileCard, HTMLStencilElement {
    }
    var HTMLProfileCardElement: {
        prototype: HTMLProfileCardElement;
        new (): HTMLProfileCardElement;
    };
    interface HTMLProfileCardLayoutElement extends Components.ProfileCardLayout, HTMLStencilElement {
    }
    var HTMLProfileCardLayoutElement: {
        prototype: HTMLProfileCardLayoutElement;
        new (): HTMLProfileCardLayoutElement;
    };
    interface HTMLProfileCardModalElement extends Components.ProfileCardModal, HTMLStencilElement {
    }
    var HTMLProfileCardModalElement: {
        prototype: HTMLProfileCardModalElement;
        new (): HTMLProfileCardModalElement;
    };
    interface HTMLProfileLogoCardElement extends Components.ProfileLogoCard, HTMLStencilElement {
    }
    var HTMLProfileLogoCardElement: {
        prototype: HTMLProfileLogoCardElement;
        new (): HTMLProfileLogoCardElement;
    };
    interface HTMLProfileTabsElement extends Components.ProfileTabs, HTMLStencilElement {
    }
    var HTMLProfileTabsElement: {
        prototype: HTMLProfileTabsElement;
        new (): HTMLProfileTabsElement;
    };
    interface HTMLProjectCardElement extends Components.ProjectCard, HTMLStencilElement {
    }
    var HTMLProjectCardElement: {
        prototype: HTMLProjectCardElement;
        new (): HTMLProjectCardElement;
    };
    interface HTMLProjectCardEventsElement extends Components.ProjectCardEvents, HTMLStencilElement {
    }
    var HTMLProjectCardEventsElement: {
        prototype: HTMLProjectCardEventsElement;
        new (): HTMLProjectCardEventsElement;
    };
    interface HTMLProjectHeadingElement extends Components.ProjectHeading, HTMLStencilElement {
    }
    var HTMLProjectHeadingElement: {
        prototype: HTMLProjectHeadingElement;
        new (): HTMLProjectHeadingElement;
    };
    interface HTMLProjectImageElement extends Components.ProjectImage, HTMLStencilElement {
    }
    var HTMLProjectImageElement: {
        prototype: HTMLProjectImageElement;
        new (): HTMLProjectImageElement;
    };
    interface HTMLProjectPageElement extends Components.ProjectPage, HTMLStencilElement {
    }
    var HTMLProjectPageElement: {
        prototype: HTMLProjectPageElement;
        new (): HTMLProjectPageElement;
    };
    interface HTMLProjectSocialsElement extends Components.ProjectSocials, HTMLStencilElement {
    }
    var HTMLProjectSocialsElement: {
        prototype: HTMLProjectSocialsElement;
        new (): HTMLProjectSocialsElement;
    };
    interface HTMLQuickLinkElement extends Components.QuickLink, HTMLStencilElement {
    }
    var HTMLQuickLinkElement: {
        prototype: HTMLQuickLinkElement;
        new (): HTMLQuickLinkElement;
    };
    interface HTMLQuickLinksElement extends Components.QuickLinks, HTMLStencilElement {
    }
    var HTMLQuickLinksElement: {
        prototype: HTMLQuickLinksElement;
        new (): HTMLQuickLinksElement;
    };
    interface HTMLScrollObserverElement extends Components.ScrollObserver, HTMLStencilElement {
    }
    var HTMLScrollObserverElement: {
        prototype: HTMLScrollObserverElement;
        new (): HTMLScrollObserverElement;
    };
    interface HTMLShowSupportElement extends Components.ShowSupport, HTMLStencilElement {
    }
    var HTMLShowSupportElement: {
        prototype: HTMLShowSupportElement;
        new (): HTMLShowSupportElement;
    };
    interface HTMLSupportOptionElement extends Components.SupportOption, HTMLStencilElement {
    }
    var HTMLSupportOptionElement: {
        prototype: HTMLSupportOptionElement;
        new (): HTMLSupportOptionElement;
    };
    interface HTMLSupportProgressElement extends Components.SupportProgress, HTMLStencilElement {
    }
    var HTMLSupportProgressElement: {
        prototype: HTMLSupportProgressElement;
        new (): HTMLSupportProgressElement;
    };
    interface HTMLTabAreaElement extends Components.TabArea, HTMLStencilElement {
    }
    var HTMLTabAreaElement: {
        prototype: HTMLTabAreaElement;
        new (): HTMLTabAreaElement;
    };
    interface HTMLTabContentElement extends Components.TabContent, HTMLStencilElement {
    }
    var HTMLTabContentElement: {
        prototype: HTMLTabContentElement;
        new (): HTMLTabContentElement;
    };
    interface HTMLTabHeaderElement extends Components.TabHeader, HTMLStencilElement {
    }
    var HTMLTabHeaderElement: {
        prototype: HTMLTabHeaderElement;
        new (): HTMLTabHeaderElement;
    };
    interface HTMLTabTitleElement extends Components.TabTitle, HTMLStencilElement {
    }
    var HTMLTabTitleElement: {
        prototype: HTMLTabTitleElement;
        new (): HTMLTabTitleElement;
    };
    interface HTMLTabsContainerElement extends Components.TabsContainer, HTMLStencilElement {
    }
    var HTMLTabsContainerElement: {
        prototype: HTMLTabsContainerElement;
        new (): HTMLTabsContainerElement;
    };
    interface HTMLTextCardElement extends Components.TextCard, HTMLStencilElement {
    }
    var HTMLTextCardElement: {
        prototype: HTMLTextCardElement;
        new (): HTMLTextCardElement;
    };
    interface HTMLUserLoginElement extends Components.UserLogin, HTMLStencilElement {
    }
    var HTMLUserLoginElement: {
        prototype: HTMLUserLoginElement;
        new (): HTMLUserLoginElement;
    };
    interface HTMLVarsityLandingElement extends Components.VarsityLanding, HTMLStencilElement {
    }
    var HTMLVarsityLandingElement: {
        prototype: HTMLVarsityLandingElement;
        new (): HTMLVarsityLandingElement;
    };
    interface HTMLVarsityNextMatchesElement extends Components.VarsityNextMatches, HTMLStencilElement {
    }
    var HTMLVarsityNextMatchesElement: {
        prototype: HTMLVarsityNextMatchesElement;
        new (): HTMLVarsityNextMatchesElement;
    };
    interface HTMLVarsityRaceElement extends Components.VarsityRace, HTMLStencilElement {
    }
    var HTMLVarsityRaceElement: {
        prototype: HTMLVarsityRaceElement;
        new (): HTMLVarsityRaceElement;
    };
    interface HTMLVarsityTotalScoreElement extends Components.VarsityTotalScore, HTMLStencilElement {
    }
    var HTMLVarsityTotalScoreElement: {
        prototype: HTMLVarsityTotalScoreElement;
        new (): HTMLVarsityTotalScoreElement;
    };
    interface HTMLVarsityUpcomingElement extends Components.VarsityUpcoming, HTMLStencilElement {
    }
    var HTMLVarsityUpcomingElement: {
        prototype: HTMLVarsityUpcomingElement;
        new (): HTMLVarsityUpcomingElement;
    };
    interface HTMLVarsityWeatherElement extends Components.VarsityWeather, HTMLStencilElement {
    }
    var HTMLVarsityWeatherElement: {
        prototype: HTMLVarsityWeatherElement;
        new (): HTMLVarsityWeatherElement;
    };
    interface HTMLVideoEmbedElement extends Components.VideoEmbed, HTMLStencilElement {
    }
    var HTMLVideoEmbedElement: {
        prototype: HTMLVideoEmbedElement;
        new (): HTMLVideoEmbedElement;
    };
    interface HTMLVideoGalleryElement extends Components.VideoGallery, HTMLStencilElement {
    }
    var HTMLVideoGalleryElement: {
        prototype: HTMLVideoGalleryElement;
        new (): HTMLVideoGalleryElement;
    };
    interface HTMLVideoGalleryStackedElement extends Components.VideoGalleryStacked, HTMLStencilElement {
    }
    var HTMLVideoGalleryStackedElement: {
        prototype: HTMLVideoGalleryStackedElement;
        new (): HTMLVideoGalleryStackedElement;
    };
    interface HTMLElementTagNameMap {
        "add-varsity-scores": HTMLAddVarsityScoresElement;
        "campaign-aim": HTMLCampaignAimElement;
        "campaign-news": HTMLCampaignNewsElement;
        "campaign-tabs": HTMLCampaignTabsElement;
        "candidate-display": HTMLCandidateDisplayElement;
        "candidate-upload": HTMLCandidateUploadElement;
        "cloudinary-app": HTMLCloudinaryAppElement;
        "create-varsity-data": HTMLCreateVarsityDataElement;
        "desktop-hide": HTMLDesktopHideElement;
        "elections-candidates": HTMLElectionsCandidatesElement;
        "elections-footer": HTMLElectionsFooterElement;
        "elections-tab": HTMLElectionsTabElement;
        "events-listing": HTMLEventsListingElement;
        "flex-container": HTMLFlexContainerElement;
        "full-bio": HTMLFullBioElement;
        "fullwidth-beige-strip": HTMLFullwidthBeigeStripElement;
        "fullwidth-strip": HTMLFullwidthStripElement;
        "gallery-thumbnail": HTMLGalleryThumbnailElement;
        "gallery-thumbnail-stacked": HTMLGalleryThumbnailStackedElement;
        "get-involved": HTMLGetInvolvedElement;
        "grid-landing": HTMLGridLandingElement;
        "grid-landing-item": HTMLGridLandingItemElement;
        "group-tab": HTMLGroupTabElement;
        "grouped-candidate-display": HTMLGroupedCandidateDisplayElement;
        "image-fit-container": HTMLImageFitContainerElement;
        "image-slider-auto": HTMLImageSliderAutoElement;
        "image-text": HTMLImageTextElement;
        "inner-tab-content": HTMLInnerTabContentElement;
        "inner-tab-header": HTMLInnerTabHeaderElement;
        "inner-tabs-container": HTMLInnerTabsContainerElement;
        "kclsu-button": HTMLKclsuButtonElement;
        "kclsu-countdown": HTMLKclsuCountdownElement;
        "kclsu-modal": HTMLKclsuModalElement;
        "kclsu-search": HTMLKclsuSearchElement;
        "kclsu-tabs": HTMLKclsuTabsElement;
        "kclsu-tabs-container": HTMLKclsuTabsContainerElement;
        "label-card": HTMLLabelCardElement;
        "last-year-scores": HTMLLastYearScoresElement;
        "lazy-image": HTMLLazyImageElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "mobile-hide": HTMLMobileHideElement;
        "modal-backdrop": HTMLModalBackdropElement;
        "my-component": HTMLMyComponentElement;
        "news-card": HTMLNewsCardElement;
        "page-banner": HTMLPageBannerElement;
        "page-content": HTMLPageContentElement;
        "page-footer": HTMLPageFooterElement;
        "preset-card": HTMLPresetCardElement;
        "preset-controls": HTMLPresetControlsElement;
        "primary-button": HTMLPrimaryButtonElement;
        "profile-card": HTMLProfileCardElement;
        "profile-card-layout": HTMLProfileCardLayoutElement;
        "profile-card-modal": HTMLProfileCardModalElement;
        "profile-logo-card": HTMLProfileLogoCardElement;
        "profile-tabs": HTMLProfileTabsElement;
        "project-card": HTMLProjectCardElement;
        "project-card-events": HTMLProjectCardEventsElement;
        "project-heading": HTMLProjectHeadingElement;
        "project-image": HTMLProjectImageElement;
        "project-page": HTMLProjectPageElement;
        "project-socials": HTMLProjectSocialsElement;
        "quick-link": HTMLQuickLinkElement;
        "quick-links": HTMLQuickLinksElement;
        "scroll-observer": HTMLScrollObserverElement;
        "show-support": HTMLShowSupportElement;
        "support-option": HTMLSupportOptionElement;
        "support-progress": HTMLSupportProgressElement;
        "tab-area": HTMLTabAreaElement;
        "tab-content": HTMLTabContentElement;
        "tab-header": HTMLTabHeaderElement;
        "tab-title": HTMLTabTitleElement;
        "tabs-container": HTMLTabsContainerElement;
        "text-card": HTMLTextCardElement;
        "user-login": HTMLUserLoginElement;
        "varsity-landing": HTMLVarsityLandingElement;
        "varsity-next-matches": HTMLVarsityNextMatchesElement;
        "varsity-race": HTMLVarsityRaceElement;
        "varsity-total-score": HTMLVarsityTotalScoreElement;
        "varsity-upcoming": HTMLVarsityUpcomingElement;
        "varsity-weather": HTMLVarsityWeatherElement;
        "video-embed": HTMLVideoEmbedElement;
        "video-gallery": HTMLVideoGalleryElement;
        "video-gallery-stacked": HTMLVideoGalleryStackedElement;
    }
}
declare namespace LocalJSX {
    interface AddVarsityScores {
        "year"?: string;
    }
    interface CampaignAim {
    }
    interface CampaignNews {
        /**
          * The MSL organisation ID where the news is kept - filled in automatically by campaign-tabs parent
         */
        "newsid"?: string;
    }
    interface CampaignTabs {
        /**
          * The URL of the facebook page or group
         */
        "facebook"?: string;
        /**
          * The MSL organisation ID where the news is kept
         */
        "newsid"?: string;
        /**
          * The URL of the document for the Strategy Doc uploaded under Resources for that campaign organisation.
         */
        "strategydoc"?: string;
    }
    interface CandidateDisplay {
        "data"?: any;
        /**
          * Lazy option in profile cards
         */
        "nolazy"?: boolean;
    }
    interface CandidateUpload {
        /**
          * MSL ELections ID
         */
        "electionid"?: string;
        /**
          * The JSON generated from the browser-side uploaded excel spreadsheet
         */
        "spreadsheetdata"?: any;
        /**
          * Either 'candidates' or 'results'. Will set the firebase url and key map
         */
        "stage"?: string;
    }
    interface CloudinaryApp {
        /**
          * The Cloudinary image id - provided using the browser-side upload script, or using the the node server function
         */
        "public_id"?: string;
    }
    interface CreateVarsityData {
        "allowcreate"?: boolean;
        "allowupdate"?: boolean;
        "msltag"?: string;
        "test"?: boolean;
        "year"?: string;
    }
    interface DesktopHide {
        /**
          * In addition to hiding all children content in screens desktop + bigger, this will hide content in screens tablet + bigger
         */
        "hidetablet"?: boolean;
    }
    interface ElectionsCandidates {
        /**
          * The election ID from MSL!
         */
        "electionid"?: string;
        /**
          * Filter out RON profiles in the candidate listing
         */
        "removeron"?: boolean;
        /**
          * Set to true to display results data. False to display All Candidates
         */
        "results"?: boolean;
    }
    interface ElectionsFooter {
    }
    interface ElectionsTab {
        "active"?: boolean;
        "combineresults"?: boolean;
        "posts"?: string;
        "tabtitle"?: string;
        "type"?: 'single' | 'multiple' | 'groupings';
    }
    interface EventsListing {
        /**
          * Choose the card component for each event
         */
        "cardtype"?: 'label' | 'text' | 'profile';
        /**
          * Show event cards in a column
         */
        "col"?: boolean;
        /**
          * The Call To Action text in the link on profile cards
         */
        "cta"?: string;
        /**
          * The MSL event tag to filter events
         */
        "eventtag": string;
        /**
          * The max number of events to display
         */
        "limit"?: string;
    }
    interface FlexContainer {
        /**
          * The same as the 'justify-content' flex property along the x axis
         */
        "alignx"?: string;
        /**
          * The same as the 'align-items' flex property along the y axis
         */
        "aligny"?: string;
        /**
          * Set the flex direction: column, reverse-column, row, reverse-row
         */
        "direction"?: string;
        /**
          * Ensure the container stretches the full width and height of parent container
         */
        "fillcontainer"?: boolean;
        /**
          * In mobile display in column direction - NOT YET RELEASED
         */
        "mobcolumn"?: boolean;
        /**
          * If the parent container element needs to be an <ul> list element
         */
        "renderlist"?: boolean;
        /**
          * Add flex-wrap to flex items
         */
        "wrap"?: boolean;
    }
    interface FullBio {
        "data"?: any;
    }
    interface FullwidthBeigeStrip {
    }
    interface FullwidthStrip {
        "color"?: string;
        "height"?: string;
    }
    interface GalleryThumbnail {
        "active"?: boolean;
        "cardheight"?: string;
        "emitid"?: string;
        "image"?: string;
        "onEmitClick"?: (event: CustomEvent<any>) => void;
        "videotitle"?: string;
    }
    interface GalleryThumbnailStacked {
        "active"?: boolean;
        "cardheight"?: string;
        "emitid"?: string;
        "image"?: string;
        "onEmitClick"?: (event: CustomEvent<any>) => void;
        "videotitle"?: string;
    }
    interface GetInvolved {
        /**
          * The typeform URL
         */
        "typeform"?: string;
    }
    interface GridLanding {
    }
    interface GridLandingItem {
        "height"?: string;
        "label"?: string;
        "width"?: string;
    }
    interface GroupTab {
        /**
          * Set this Group Tab as the active tab
         */
        "active"?: boolean;
        /**
          * The exact post names as appeared in MSL, separated by a pipe character |
         */
        "exclude"?: string;
        "regex"?: string;
        "replace"?: string;
        "searchterms"?: string;
        /**
          * The title for the tab for this group
         */
        "tabtitle"?: string;
    }
    interface GroupedCandidateDisplay {
        "data"?: any;
    }
    interface ImageFitContainer {
        "alt"?: string;
        "classes"?: string;
        "src"?: string;
    }
    interface ImageSliderAuto {
        "classes"?: string;
        /**
          * A string of images
         */
        "images"?: string[];
        "interval"?: number;
    }
    interface ImageText {
        /**
          * This turns the component into a card, rather than just an image/text layout
         */
        "card"?: boolean;
        /**
          * The primary image focus area. standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea"?: string;
        /**
          * The title at the top of the text
         */
        "heading"?: string;
        /**
          * Applies to mobilescreen displays only. Will hide the image and display content only
         */
        "hideimage"?: boolean;
        /**
          * The image link (get from Cloudinary)
         */
        "image"?: string;
        /**
          * Provide a set % width for the image. Takes a  number without the % sign
         */
        "imagewidth"?: string;
        /**
          * Animate the image (scale in) on scroll
         */
        "imagezoom"?: boolean;
        /**
          * Set the margin for the card
         */
        "margin"?: string;
        /**
          * When the image and content stack, reverse the order so the image is on top
         */
        "reversestack"?: boolean;
        /**
          * Applies to MOBILE / TABLET <780px screens only. Paragraph and heading sizes reduced
         */
        "smalltext"?: boolean;
        /**
          * Switch the side the image is on.
         */
        "switch"?: boolean;
        /**
          * The paragraph text
         */
        "text"?: string;
        /**
          * Choose the colour for the paragraph text
         */
        "textcolour"?: string;
    }
    interface InnerTabContent {
        "active"?: boolean;
        "name"?: string;
    }
    interface InnerTabHeader {
        "active"?: boolean;
        "index"?: number;
        "name"?: string;
        "onSelectInnerTab"?: (event: CustomEvent<any>) => void;
        "onSelectInnerTabByIndex"?: (event: CustomEvent<any>) => void;
    }
    interface InnerTabsContainer {
        "innertab"?: boolean;
    }
    interface KclsuButton {
        /**
          * Centers the button in the page
         */
        "center"?: boolean;
        /**
          * Provide a custom click function handler. Use emitid rather if a parent component is listening for event.
         */
        "clickfn"?: () => void;
        /**
          * Makes the link download
         */
        "download"?: boolean;
        /**
          * Event Listener name
         */
        "emitid"?: string;
        /**
          * Give the button a fixed width
         */
        "fixedwidth"?: string;
        /**
          * Adds icon to the page
         */
        "icon"?: string;
        /**
          * The URL to link to
         */
        "link"?: string;
        /**
          * specifiy a margin, otherwise uses default
         */
        "margin"?: string;
        /**
          * Opens the link in a new tab
         */
        "newtab"?: boolean;
        "onEmitClick"?: (event: CustomEvent<any>) => void;
        /**
          * Make the button a secondary purple button
         */
        "purple"?: boolean;
        /**
          * Give the button rounded corners
         */
        "rounded"?: boolean;
        /**
          * Make the button small
         */
        "small"?: boolean;
        /**
          * The text for the button
         */
        "text"?: string;
        /**
          * Makes the button very small
         */
        "verysmall"?: boolean;
    }
    interface KclsuCountdown {
        /**
          * The date to countdown to. Must match date string format
         */
        "date": string;
        /**
          * Optional: set a fixed font-size for tablet, desktop and wider.
         */
        "fontsize"?: any;
        /**
          * The margin of the countdown clock
         */
        "margin"?: string;
        /**
          * Give the message text a white block background
         */
        "msgbg"?: boolean;
        /**
          * The text beneath the countdown
         */
        "text"?: string;
        /**
          * Optional: set a colour for the text beneath the countdown.
         */
        "textcolour"?: any;
        /**
          * The width of the countdown clock - in Pixels ONLY
         */
        "width"?: string;
    }
    interface KclsuModal {
        /**
          * This will allow a user to click away and hide the modal when open
         */
        "autoexit"?: boolean;
        /**
          * Supply a custom function to be invoked when modal is opened
         */
        "enterfn"?: () => void;
        /**
          * Supply a custom function to be invoked when modal is closed
         */
        "exitfn"?: () => void;
        /**
          * Set position to absolute or other. Defaults to fixed
         */
        "position"?: string;
        /**
          * Controls when the modal is open and visible or not
         */
        "show"?: boolean;
    }
    interface KclsuSearch {
        /**
          * If searching an custom web component, provide the name of the atrribute to query
         */
        "attr"?: string;
        /**
          * The container of the search result / search field, used to hide the element from results. Can be a tag, class or id
         */
        "containerselector": string;
        /**
          * Remove the error message if there are no search results
         */
        "noerror"?: boolean;
        /**
          * The text inside the search input, which disappears once a user starts typing
         */
        "placeholdertext"?: string;
        /**
          * If searching the text of an HTML element, provide the element's selector - tag, class or id
         */
        "selector"?: string;
    }
    interface KclsuTabs {
        "variant"?: Variants;
    }
    interface KclsuTabsContainer {
    }
    interface LabelCard {
        /**
          * If a button included, the link for the button
         */
        "buttonlink"?: string;
        /**
          * If a button included, the text for the button
         */
        "buttontitle"?: string;
        /**
          * Specify a fixed cardheight
         */
        "cardheight"?: string;
        /**
          * The main title of the card
         */
        "cardtitle"?: string;
        /**
          * Specify a fixed card with
         */
        "cardwidth"?: string;
        /**
          * The main title of the card
         */
        "highlightText"?: boolean;
        /**
          * The image URL for the card. Defaults to the kclsu logo
         */
        "image"?: string;
        /**
          * The link for the card - NOT for the button
         */
        "link"?: string;
        /**
          * Give the card a custom margin
         */
        "margin"?: string;
        /**
          * If image to be displayed on right hand side
         */
        "reverse"?: boolean;
        /**
          * Make the card the smallest height possible
         */
        "smallestheight"?: boolean;
        /**
          * This will reduce the size of the heading in the card
         */
        "smallheading"?: boolean;
        /**
          * The sub text beneath the title
         */
        "text"?: string;
    }
    interface LastYearScores {
    }
    interface LazyImage {
        /**
          * The alt tag of the image
         */
        "alt"?: string;
        /**
          * Image will scale into view
         */
        "animatein"?: boolean;
        /**
          * If the image is being used only as thumbnail, such as project-cards and image-text components
         */
        "contentimage"?: boolean;
        /**
          * Provide a custom cloudinary transformation. Must be in format: string,string,string eg: c_fill,f_auto,fl_any_format
         */
        "customtransform"?: string;
        /**
          * If setting width for mobile and desktop, use width property for mobile and this property for desktop
         */
        "desktopwidth"?: string;
        /**
          * Use standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea"?: string;
        "image"?: string;
        /**
          * If set to false, it will keep any existing cloudinary transforms
         */
        "keeptransforms"?: boolean;
        /**
          * Remove lazy-loading functionality. Retains Object Fit positioing
         */
        "nolazy"?: boolean;
        /**
          * If you want to render an img element in a responsive container without object positioning
         */
        "plainimg"?: boolean;
        /**
          * If the image is being used only as thumbnail, such as in event cards, label cards and profile cards
         */
        "thumbnail"?: boolean;
        /**
          * A width for the image in pixels
         */
        "width"?: string;
    }
    interface LoadingSpinner {
        /**
          * Set margin of spinner
         */
        "margin"?: string;
        /**
          * Display the spinner
         */
        "show"?: boolean;
    }
    interface MobileHide {
        /**
          * In addition to hiding all children in screens mobile + smaller, this will hide content in screens tablet + smaller
         */
        "hidetablet"?: boolean;
    }
    interface ModalBackdrop {
        "onExitModal"?: (event: CustomEvent<any>) => void;
        "showbg"?: boolean;
    }
    interface MyComponent {
    }
    interface NewsCard {
        "newslink"?: string;
        "newstitle"?: string;
    }
    interface PageBanner {
        /**
          * Supply a background image for the banner
         */
        "bgimage"?: string;
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme"?: string;
        /**
          * The <h2> heading for the section
         */
        "heading"?: string;
        /**
          * Supply an image for the banner
         */
        "image"?: string;
        /**
          * Supply a custom height for the banner image
         */
        "imageheight"?: string;
        /**
          * Supply an custom width for the banner image
         */
        "imagewidth"?: string;
        /**
          * If a landing page
         */
        "landing"?: boolean;
        /**
          * The <h1> heading for a page. There should only be one pagetitle for page. Use the heading attribute for other titles.
         */
        "pagetitle"?: string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours"?: string;
        /**
          * The paragraph text. If you need text links or separate paragraphs, rather insert HTML.
         */
        "text"?: string;
        /**
          * Supply a video URL
         */
        "video"?: string;
    }
    interface PageContent {
    }
    interface PageFooter {
        "bgcolor"?: string;
        "colone"?: string;
        "colthree"?: string;
        "coltwo"?: string;
        "logo"?: string;
        "textcolor"?: string;
    }
    interface PresetCard {
        "dimensions"?: string;
        "onSelectPreset"?: (event: CustomEvent<any>) => void;
        "presetid"?: string;
        "presetname"?: string;
    }
    interface PresetControls {
        "onSubmitEdits"?: (event: CustomEvent<any>) => void;
    }
    interface PrimaryButton {
        "to"?: string;
    }
    interface ProfileCard {
        /**
          * The text for the primary text link bottom left
         */
        "cta"?: string;
        /**
          * The ID string for click events, using Stencil's Emitter. Only applies to card's bottom right link- DEVELOPER USE
         */
        "emitid"?: string;
        /**
          * The image URL
         */
        "image"?: string;
        /**
          * The URL link for the primary text link on the bottom left of the card
         */
        "link"?: string;
        /**
          * The title for the card - usually a full name
         */
        "name"?: string;
        /**
          * Applies to lazy loading of images. Remove lazy loading
         */
        "nolazy"?: boolean;
        "onEmitClick"?: (event: CustomEvent<any>) => void;
        /**
          * A sub heading - usually a position or field title
         */
        "position"?: string;
        /**
          * A call back function to be supplied for the first (left hand side) call to action, as well as the clickable name
         */
        "primaryfn"?: () => void;
        /**
          * A call back function to be supplied for the second (right hand side) call to action
         */
        "secondaryfn"?: () => void;
        /**
          * The text for the secondary text link bottom right
         */
        "secondcta"?: string;
        /**
          * A second URL link for the bottom right of the card
         */
        "secondlink"?: string;
    }
    interface ProfileCardLayout {
    }
    interface ProfileCardModal {
        /**
          * The text for the primary text link bottom left
         */
        "cta"?: string;
        /**
          * The image URL
         */
        "image"?: string;
        /**
          * The URL link for the primary text link on the bottom left of the card
         */
        "link"?: string;
        /**
          * The title for the card - usually a full name
         */
        "name"?: string;
        /**
          * A sub heading - usually a position or field title
         */
        "position"?: string;
        /**
          * The text for the secondary text link bottom right
         */
        "secondcta"?: string;
        /**
          * A second URL link for the bottom right of the card
         */
        "secondlink"?: string;
    }
    interface ProfileLogoCard {
        /**
          * The text title of the card
         */
        "cardtitle": string;
        /**
          * The background image URL
         */
        "image"?: string;
        /**
          * Specify which part of the image you want to focus - top, bottom, right, left, center
         */
        "imagefocus"?: string;
        /**
          * The URL link for the the card
         */
        "link"?: string;
        /**
          * The logo image URL - at least 150x150px, must be a square image.
         */
        "logo"?: string;
        /**
          * OPTIONAL - if you are using a transparent text icon and need to set a background colour
         */
        "logocolour"?: string;
    }
    interface ProfileTabs {
        /**
          * Specify Tab ID you want to keep open by default
         */
        "activeid"?: string;
        /**
          * The URL of the database to fetch profiles from (firebase)
         */
        "database"?: string;
        /**
          * Array with child arrays containing Tab Heading, Tab ID, and Text(optional)
         */
        "headings"?: any;
    }
    interface ProjectCard {
        /**
          * Position the content of the card along the X axis
         */
        "alignx"?: string;
        /**
          * Position the content of the card along the Y axis
         */
        "aligny"?: string;
        /**
          * If displaying events, set a custom URL for 'all events' in place of dynamically created URL
         */
        "alleventsurl"?: string;
        /**
          * Display an event listing
         */
        "eventtag"?: string;
        /**
          * The primary image focus area. standard CSS object-position values to set a focus area on the image. EG 'center left'
         */
        "focusarea"?: string;
        "heading"?: string;
        /**
          * Applies to mobile displays only. Will hide the image and display content only
         */
        "hideimage"?: boolean;
        "image"?: string;
        "text"?: string;
        "transparent"?: boolean;
    }
    interface ProjectCardEvents {
        /**
          * Optional. Supply a URL which the All Events button will link to if there are events. Otherwise this is dynamically set.
         */
        "alleventsurl"?: string;
        /**
          * The main heading
         */
        "heading"?: string;
        /**
          * The MSL Event tag
         */
        "tag"?: string;
    }
    interface ProjectHeading {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme"?: string;
        /**
          * The <h2> heading for the section
         */
        "heading"?: string;
        /**
          * The <h1> heading for a page. There should only be one pagetitle for page. Use the heading attribute for other titles.
         */
        "pagetitle"?: string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours"?: string;
        /**
          * The paragraph text. If you need text links or separate paragraphs, rather insert HTML.
         */
        "text"?: string;
    }
    interface ProjectImage {
        /**
          * The alt tage for the image
         */
        "alt"?: string;
        /**
          * Choose an area of the image to focus: top, left, right, bottom
         */
        "focusarea"?: string;
        /**
          * The image URL link
         */
        "link"?: string;
    }
    interface ProjectPage {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme"?: string;
        /**
          * The colours for the <h1> heading, separated with a comma. eg "h1 colour, bg colour"
         */
        "pagetitlecolours"?: string;
    }
    interface ProjectSocials {
        /**
          * The colours for the background & text of <project-heading>, separated with a comma. eg "text colour, bg colour"
         */
        "colourscheme"?: string;
        /**
          * The hashtag used in social media. Do not include the hash symbol
         */
        "hashtag"?: string;
        /**
          * For developers only. The name of the slot for this component to be inserted
         */
        "slotr"?: string;
    }
    interface QuickLink {
        "to"?: string;
    }
    interface QuickLinks {
        "name"?: string;
    }
    interface ScrollObserver {
        /**
          * Select the animation name for the child component on intersection. Choose from list of supplied animations
         */
        "animation"?: string;
        /**
          * If true, the component will render a child lazy-image
         */
        "lazyimage"?: boolean;
    }
    interface ShowSupport {
    }
    interface SupportOption {
        "heading"?: string;
        "supportname"?: string;
    }
    interface SupportProgress {
        "current"?: any;
        "maxtotal"?: any;
        "supportname"?: string;
    }
    interface TabArea {
        "active"?: boolean;
        "name"?: string;
        "onCloseArea"?: (event: CustomEvent<any>) => void;
    }
    interface TabContent {
        "active"?: boolean;
        "name"?: string;
    }
    interface TabHeader {
        "active"?: boolean;
        "index"?: string;
        "name"?: string;
        "onSelectTab"?: (event: CustomEvent<any>) => void;
        "onSelectTabByIndex"?: (event: CustomEvent<any>) => void;
    }
    interface TabTitle {
        /**
          * Is the tab title active, and corresponding tab area visible
         */
        "active"?: boolean;
        /**
          * A unique name, matching the name of the tab area component
         */
        "name"?: string;
        "onSelectFocussableElement"?: (event: CustomEvent<any>) => void;
        "onSelectTabName"?: (event: CustomEvent<any>) => void;
        "variant"?: Variants;
    }
    interface TabsContainer {
        "innertab"?: boolean;
    }
    interface TextCard {
        /**
          * The purple heading in the card
         */
        "cardtitle": string;
        /**
          * The Url link you want to link to
         */
        "link"?: string;
        /**
          * Any extra text. If you want it to be empty, add empty string value:  ""
         */
        "subtext"?: string;
    }
    interface UserLogin {
        /**
          * Provide a custom callback.
         */
        "callbackFn"?: (token: string) => void;
        /**
          * The name of the database area. For example: projectx
         */
        "database": string;
        "unsignedauth"?: boolean;
    }
    interface VarsityLanding {
        "currentDate"?: { weekday: string; day: any; month: string; year: any; hours: any; minutes: any; };
        "year"?: string;
    }
    interface VarsityNextMatches {
        "data"?: any;
    }
    interface VarsityRace {
        "data"?: any;
        "target"?: number;
    }
    interface VarsityTotalScore {
        "scores"?: any;
    }
    interface VarsityUpcoming {
        "data"?: any;
        "showall"?: boolean;
    }
    interface VarsityWeather {
    }
    interface VideoEmbed {
        /**
          * The id of the Youtube Video - found in the URL eg youtube.com/watch?v={VIDEO_ID}
         */
        "embedid"?: any;
        /**
          * The URL of the Youtube video you want to display - CURRENTLY NOT WORKING
         */
        "url"?: string;
    }
    interface VideoGallery {
        /**
          * The Youtube URL for any given playlist
         */
        "playlist": any;
    }
    interface VideoGalleryStacked {
        /**
          * The Youtube URL for any given playlist
         */
        "playlist": any;
    }
    interface IntrinsicElements {
        "add-varsity-scores": AddVarsityScores;
        "campaign-aim": CampaignAim;
        "campaign-news": CampaignNews;
        "campaign-tabs": CampaignTabs;
        "candidate-display": CandidateDisplay;
        "candidate-upload": CandidateUpload;
        "cloudinary-app": CloudinaryApp;
        "create-varsity-data": CreateVarsityData;
        "desktop-hide": DesktopHide;
        "elections-candidates": ElectionsCandidates;
        "elections-footer": ElectionsFooter;
        "elections-tab": ElectionsTab;
        "events-listing": EventsListing;
        "flex-container": FlexContainer;
        "full-bio": FullBio;
        "fullwidth-beige-strip": FullwidthBeigeStrip;
        "fullwidth-strip": FullwidthStrip;
        "gallery-thumbnail": GalleryThumbnail;
        "gallery-thumbnail-stacked": GalleryThumbnailStacked;
        "get-involved": GetInvolved;
        "grid-landing": GridLanding;
        "grid-landing-item": GridLandingItem;
        "group-tab": GroupTab;
        "grouped-candidate-display": GroupedCandidateDisplay;
        "image-fit-container": ImageFitContainer;
        "image-slider-auto": ImageSliderAuto;
        "image-text": ImageText;
        "inner-tab-content": InnerTabContent;
        "inner-tab-header": InnerTabHeader;
        "inner-tabs-container": InnerTabsContainer;
        "kclsu-button": KclsuButton;
        "kclsu-countdown": KclsuCountdown;
        "kclsu-modal": KclsuModal;
        "kclsu-search": KclsuSearch;
        "kclsu-tabs": KclsuTabs;
        "kclsu-tabs-container": KclsuTabsContainer;
        "label-card": LabelCard;
        "last-year-scores": LastYearScores;
        "lazy-image": LazyImage;
        "loading-spinner": LoadingSpinner;
        "mobile-hide": MobileHide;
        "modal-backdrop": ModalBackdrop;
        "my-component": MyComponent;
        "news-card": NewsCard;
        "page-banner": PageBanner;
        "page-content": PageContent;
        "page-footer": PageFooter;
        "preset-card": PresetCard;
        "preset-controls": PresetControls;
        "primary-button": PrimaryButton;
        "profile-card": ProfileCard;
        "profile-card-layout": ProfileCardLayout;
        "profile-card-modal": ProfileCardModal;
        "profile-logo-card": ProfileLogoCard;
        "profile-tabs": ProfileTabs;
        "project-card": ProjectCard;
        "project-card-events": ProjectCardEvents;
        "project-heading": ProjectHeading;
        "project-image": ProjectImage;
        "project-page": ProjectPage;
        "project-socials": ProjectSocials;
        "quick-link": QuickLink;
        "quick-links": QuickLinks;
        "scroll-observer": ScrollObserver;
        "show-support": ShowSupport;
        "support-option": SupportOption;
        "support-progress": SupportProgress;
        "tab-area": TabArea;
        "tab-content": TabContent;
        "tab-header": TabHeader;
        "tab-title": TabTitle;
        "tabs-container": TabsContainer;
        "text-card": TextCard;
        "user-login": UserLogin;
        "varsity-landing": VarsityLanding;
        "varsity-next-matches": VarsityNextMatches;
        "varsity-race": VarsityRace;
        "varsity-total-score": VarsityTotalScore;
        "varsity-upcoming": VarsityUpcoming;
        "varsity-weather": VarsityWeather;
        "video-embed": VideoEmbed;
        "video-gallery": VideoGallery;
        "video-gallery-stacked": VideoGalleryStacked;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-varsity-scores": LocalJSX.AddVarsityScores & JSXBase.HTMLAttributes<HTMLAddVarsityScoresElement>;
            "campaign-aim": LocalJSX.CampaignAim & JSXBase.HTMLAttributes<HTMLCampaignAimElement>;
            "campaign-news": LocalJSX.CampaignNews & JSXBase.HTMLAttributes<HTMLCampaignNewsElement>;
            "campaign-tabs": LocalJSX.CampaignTabs & JSXBase.HTMLAttributes<HTMLCampaignTabsElement>;
            "candidate-display": LocalJSX.CandidateDisplay & JSXBase.HTMLAttributes<HTMLCandidateDisplayElement>;
            "candidate-upload": LocalJSX.CandidateUpload & JSXBase.HTMLAttributes<HTMLCandidateUploadElement>;
            "cloudinary-app": LocalJSX.CloudinaryApp & JSXBase.HTMLAttributes<HTMLCloudinaryAppElement>;
            "create-varsity-data": LocalJSX.CreateVarsityData & JSXBase.HTMLAttributes<HTMLCreateVarsityDataElement>;
            "desktop-hide": LocalJSX.DesktopHide & JSXBase.HTMLAttributes<HTMLDesktopHideElement>;
            "elections-candidates": LocalJSX.ElectionsCandidates & JSXBase.HTMLAttributes<HTMLElectionsCandidatesElement>;
            "elections-footer": LocalJSX.ElectionsFooter & JSXBase.HTMLAttributes<HTMLElectionsFooterElement>;
            "elections-tab": LocalJSX.ElectionsTab & JSXBase.HTMLAttributes<HTMLElectionsTabElement>;
            "events-listing": LocalJSX.EventsListing & JSXBase.HTMLAttributes<HTMLEventsListingElement>;
            "flex-container": LocalJSX.FlexContainer & JSXBase.HTMLAttributes<HTMLFlexContainerElement>;
            "full-bio": LocalJSX.FullBio & JSXBase.HTMLAttributes<HTMLFullBioElement>;
            "fullwidth-beige-strip": LocalJSX.FullwidthBeigeStrip & JSXBase.HTMLAttributes<HTMLFullwidthBeigeStripElement>;
            "fullwidth-strip": LocalJSX.FullwidthStrip & JSXBase.HTMLAttributes<HTMLFullwidthStripElement>;
            "gallery-thumbnail": LocalJSX.GalleryThumbnail & JSXBase.HTMLAttributes<HTMLGalleryThumbnailElement>;
            "gallery-thumbnail-stacked": LocalJSX.GalleryThumbnailStacked & JSXBase.HTMLAttributes<HTMLGalleryThumbnailStackedElement>;
            "get-involved": LocalJSX.GetInvolved & JSXBase.HTMLAttributes<HTMLGetInvolvedElement>;
            "grid-landing": LocalJSX.GridLanding & JSXBase.HTMLAttributes<HTMLGridLandingElement>;
            "grid-landing-item": LocalJSX.GridLandingItem & JSXBase.HTMLAttributes<HTMLGridLandingItemElement>;
            "group-tab": LocalJSX.GroupTab & JSXBase.HTMLAttributes<HTMLGroupTabElement>;
            "grouped-candidate-display": LocalJSX.GroupedCandidateDisplay & JSXBase.HTMLAttributes<HTMLGroupedCandidateDisplayElement>;
            "image-fit-container": LocalJSX.ImageFitContainer & JSXBase.HTMLAttributes<HTMLImageFitContainerElement>;
            "image-slider-auto": LocalJSX.ImageSliderAuto & JSXBase.HTMLAttributes<HTMLImageSliderAutoElement>;
            "image-text": LocalJSX.ImageText & JSXBase.HTMLAttributes<HTMLImageTextElement>;
            "inner-tab-content": LocalJSX.InnerTabContent & JSXBase.HTMLAttributes<HTMLInnerTabContentElement>;
            "inner-tab-header": LocalJSX.InnerTabHeader & JSXBase.HTMLAttributes<HTMLInnerTabHeaderElement>;
            "inner-tabs-container": LocalJSX.InnerTabsContainer & JSXBase.HTMLAttributes<HTMLInnerTabsContainerElement>;
            "kclsu-button": LocalJSX.KclsuButton & JSXBase.HTMLAttributes<HTMLKclsuButtonElement>;
            "kclsu-countdown": LocalJSX.KclsuCountdown & JSXBase.HTMLAttributes<HTMLKclsuCountdownElement>;
            "kclsu-modal": LocalJSX.KclsuModal & JSXBase.HTMLAttributes<HTMLKclsuModalElement>;
            "kclsu-search": LocalJSX.KclsuSearch & JSXBase.HTMLAttributes<HTMLKclsuSearchElement>;
            "kclsu-tabs": LocalJSX.KclsuTabs & JSXBase.HTMLAttributes<HTMLKclsuTabsElement>;
            "kclsu-tabs-container": LocalJSX.KclsuTabsContainer & JSXBase.HTMLAttributes<HTMLKclsuTabsContainerElement>;
            "label-card": LocalJSX.LabelCard & JSXBase.HTMLAttributes<HTMLLabelCardElement>;
            "last-year-scores": LocalJSX.LastYearScores & JSXBase.HTMLAttributes<HTMLLastYearScoresElement>;
            "lazy-image": LocalJSX.LazyImage & JSXBase.HTMLAttributes<HTMLLazyImageElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "mobile-hide": LocalJSX.MobileHide & JSXBase.HTMLAttributes<HTMLMobileHideElement>;
            "modal-backdrop": LocalJSX.ModalBackdrop & JSXBase.HTMLAttributes<HTMLModalBackdropElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "news-card": LocalJSX.NewsCard & JSXBase.HTMLAttributes<HTMLNewsCardElement>;
            "page-banner": LocalJSX.PageBanner & JSXBase.HTMLAttributes<HTMLPageBannerElement>;
            "page-content": LocalJSX.PageContent & JSXBase.HTMLAttributes<HTMLPageContentElement>;
            "page-footer": LocalJSX.PageFooter & JSXBase.HTMLAttributes<HTMLPageFooterElement>;
            "preset-card": LocalJSX.PresetCard & JSXBase.HTMLAttributes<HTMLPresetCardElement>;
            "preset-controls": LocalJSX.PresetControls & JSXBase.HTMLAttributes<HTMLPresetControlsElement>;
            "primary-button": LocalJSX.PrimaryButton & JSXBase.HTMLAttributes<HTMLPrimaryButtonElement>;
            "profile-card": LocalJSX.ProfileCard & JSXBase.HTMLAttributes<HTMLProfileCardElement>;
            "profile-card-layout": LocalJSX.ProfileCardLayout & JSXBase.HTMLAttributes<HTMLProfileCardLayoutElement>;
            "profile-card-modal": LocalJSX.ProfileCardModal & JSXBase.HTMLAttributes<HTMLProfileCardModalElement>;
            "profile-logo-card": LocalJSX.ProfileLogoCard & JSXBase.HTMLAttributes<HTMLProfileLogoCardElement>;
            "profile-tabs": LocalJSX.ProfileTabs & JSXBase.HTMLAttributes<HTMLProfileTabsElement>;
            "project-card": LocalJSX.ProjectCard & JSXBase.HTMLAttributes<HTMLProjectCardElement>;
            "project-card-events": LocalJSX.ProjectCardEvents & JSXBase.HTMLAttributes<HTMLProjectCardEventsElement>;
            "project-heading": LocalJSX.ProjectHeading & JSXBase.HTMLAttributes<HTMLProjectHeadingElement>;
            "project-image": LocalJSX.ProjectImage & JSXBase.HTMLAttributes<HTMLProjectImageElement>;
            "project-page": LocalJSX.ProjectPage & JSXBase.HTMLAttributes<HTMLProjectPageElement>;
            "project-socials": LocalJSX.ProjectSocials & JSXBase.HTMLAttributes<HTMLProjectSocialsElement>;
            "quick-link": LocalJSX.QuickLink & JSXBase.HTMLAttributes<HTMLQuickLinkElement>;
            "quick-links": LocalJSX.QuickLinks & JSXBase.HTMLAttributes<HTMLQuickLinksElement>;
            "scroll-observer": LocalJSX.ScrollObserver & JSXBase.HTMLAttributes<HTMLScrollObserverElement>;
            "show-support": LocalJSX.ShowSupport & JSXBase.HTMLAttributes<HTMLShowSupportElement>;
            "support-option": LocalJSX.SupportOption & JSXBase.HTMLAttributes<HTMLSupportOptionElement>;
            "support-progress": LocalJSX.SupportProgress & JSXBase.HTMLAttributes<HTMLSupportProgressElement>;
            "tab-area": LocalJSX.TabArea & JSXBase.HTMLAttributes<HTMLTabAreaElement>;
            "tab-content": LocalJSX.TabContent & JSXBase.HTMLAttributes<HTMLTabContentElement>;
            "tab-header": LocalJSX.TabHeader & JSXBase.HTMLAttributes<HTMLTabHeaderElement>;
            "tab-title": LocalJSX.TabTitle & JSXBase.HTMLAttributes<HTMLTabTitleElement>;
            "tabs-container": LocalJSX.TabsContainer & JSXBase.HTMLAttributes<HTMLTabsContainerElement>;
            "text-card": LocalJSX.TextCard & JSXBase.HTMLAttributes<HTMLTextCardElement>;
            "user-login": LocalJSX.UserLogin & JSXBase.HTMLAttributes<HTMLUserLoginElement>;
            "varsity-landing": LocalJSX.VarsityLanding & JSXBase.HTMLAttributes<HTMLVarsityLandingElement>;
            "varsity-next-matches": LocalJSX.VarsityNextMatches & JSXBase.HTMLAttributes<HTMLVarsityNextMatchesElement>;
            "varsity-race": LocalJSX.VarsityRace & JSXBase.HTMLAttributes<HTMLVarsityRaceElement>;
            "varsity-total-score": LocalJSX.VarsityTotalScore & JSXBase.HTMLAttributes<HTMLVarsityTotalScoreElement>;
            "varsity-upcoming": LocalJSX.VarsityUpcoming & JSXBase.HTMLAttributes<HTMLVarsityUpcomingElement>;
            "varsity-weather": LocalJSX.VarsityWeather & JSXBase.HTMLAttributes<HTMLVarsityWeatherElement>;
            "video-embed": LocalJSX.VideoEmbed & JSXBase.HTMLAttributes<HTMLVideoEmbedElement>;
            "video-gallery": LocalJSX.VideoGallery & JSXBase.HTMLAttributes<HTMLVideoGalleryElement>;
            "video-gallery-stacked": LocalJSX.VideoGalleryStacked & JSXBase.HTMLAttributes<HTMLVideoGalleryStackedElement>;
        }
    }
}
